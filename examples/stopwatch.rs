#[cfg(feature = "quickcheck")]
fn main() {
    use core::time::Duration;
    use inator::*;
    use quickcheck::*;
    use std::{env, panic, sync::mpsc, thread, time::Instant};

    macro_rules! time {
        ($ex:expr) => {
            (|| {
                let (tx, rx) = mpsc::channel();
                let now = Instant::now();
                thread::Builder::new()
                    .name("Worker".to_owned())
                    .spawn(move || {
                        let out = $ex;
                        tx.send(out).expect("Couldn't send to the main thread");
                    })
                    .expect("Couldn't start another thread");
                while now.elapsed() < Duration::from_secs(10) {
                    if let Ok(ok) = rx.try_recv() {
                        return Some(ok);
                    }
                }
                None
            })()
        };
    }

    let gen_size = env::var("QUICKCHECK_GENERATOR_SIZE")
        .ok()
        .and_then(|s| s.parse().ok())
        .unwrap_or(100);

    // let qc_tests = env::var("QUICKCHECK_TESTS")
    //     .ok()
    //     .and_then(|s| s.parse().ok())
    //     .unwrap_or(100);

    fn check(parser: &Nondeterministic<u8, u8>) -> bool {
        let first_half = fixpoint("da capo") >> parser.clone();
        time!(first_half >> recurse("da capo")).is_some()
    }

    let mut gen = Gen::new(gen_size);
    // for _ in 0..qc_tests {
    loop {
        let parser = Nondeterministic::arbitrary(&mut gen);
        if !check(&parser) {
            for shrunk in parser.shrink() {
                if !check(&shrunk) {
                    panic!(
                        "
Parser:
{:?}

",
                        shrunk.to_src(),
                    )
                }
            }
            panic!(
                "
Parser:
{:?}

",
                parser.to_src(),
            )
        }
    }
}

#[cfg(not(feature = "quickcheck"))]
fn main() {
    use inator::*;
    Nondeterministic { states: vec![State { transitions: State { wildcard: None, map_none: None, map_some: BTreeMap::new() }, non_accepting: [\"\".to_owned(), \"\\u{10}6\\u{2029}\\u{d3b1}\\u{14}\".to_owned(), \"\\u{18}8$T\\u{88}\\\"\\u{19}\\u{9b}(.\".to_owned(), \"\\u{1f}\\u{e}2\\u{202e}\\u{e4f7}\\u{95990}\\u{ad}1\\u{84} \\u{203a}\\u{98}\\u{13}\".to_owned(), \"%JM\\u{2000} F\".to_owned(), \"+\\u{180e}\".to_owned(), \"3\\u{2ef3}\\u{d2bbc}k\\u{6dd}@EI\\u{2032}\\u{91}\\u{ca53}\\u{9990}2;\".to_owned(), \"B/\\u{1f635}-56g}\\u{40a1}$\\u{1c}7}\".to_owned(), \"Bo{\\u{100000}\\u{604}}0#<\".to_owned(), \"H:R\\u{e000}#!\\u{ae}\\u{97}\\u{1a}\\u{f369},}v3C\".to_owned(), \"{\\u{13}\\u{8a}\\u{25618}&\\n}`\\u{2028}\\u{a4ce}.|\\u{9b}\\u{23220}\".to_owned(), \"\\u{82}#\\u{2040}\\u{6ea9}\\u{8dc8}\\u{4}\\u{2068}\\u{fffa}\\u{13}l\\u{93}\\t\".to_owned()].collect(), tags: [\"\".to_owned(), \"\\r\\u{a8}\\u{b}\\u{a0}}Kt\\u{fff0}\\u{110bd}\".to_owned(), \"\\u{1f}0k \".to_owned(), \"3%\\u{200d}\\u{8a}1\".to_owned(), \"8\\u{f29b}\\u{8f}\\u{100000}\\u{2008}{\\n?736}\".to_owned(), \"@}\\u{a0}*\\u{a6e}\\u{205c}\\u{b}\\u{18}]\\u{ae53}2;M\\u{a9}\".to_owned(), \"\\\\\\u{ac}8\\u{0}\\u{1e}X\\r;91[T\\u{aa}O\\u{c22c}\".to_owned(), \"}\\u{ff80c}\\u{4}\\u{aaa81}\\u{2c00}\\u{2061}\\u{ae}m\\u{10b788}\".to_owned(), \"\\u{602}\\u{95}\".to_owned(), \"\\u{61c}-\\u{84}L\\u{a5}\\r3\\u{a8}0\\u{3f523}<>]\".to_owned(), \"\\u{82829}P}3\\u{3492}\\u{87}%\\u{a8}>\".to_owned()].collect() }, State { transitions: State { wildcard: None, map_none: None, map_some: vec![(b'\\x17', CurryInput::Scrutinize(RangeMap { entries: vec![(b'\\x01'..=b'\\xa3', Transition { dst: [Some(0), Some(1), Some(3), Some(4), Some(5)].collect(), act: Action::Push(b'\\x00'), update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } }), (b'\\xd6'..=b'\\xe2', Transition { dst: [Some(0), Some(1), Some(2), Some(3), Some(5)].collect(), act: Action::Push(b'E'), update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })].into_iter().collect() })), (b'\\x1b', CurryInput::Scrutinize(RangeMap { entries: iter::once((b'\\x1b'..=b'\\xec', Transition { dst: [Some(0), Some(1), Some(3), Some(4)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })).collect() })), (b'!', CurryInput::Wildcard(Transition { dst: [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), (b'$', CurryInput::Scrutinize(RangeMap { entries: iter::once((b'\\x07'..=b'\\xfc', Transition { dst: [Some(1), Some(2), Some(3), Some(4), Some(5)].collect(), act: Action::Push(b'\\xc3'), update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })).collect() })), (b'\\'', CurryInput::Wildcard(Transition { dst: [Some(2), Some(3)].collect(), act: Action::Push(b'\\xec'), update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), (b'-', CurryInput::Wildcard(Transition { dst: [Some(3), Some(5)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), (b's', CurryInput::Scrutinize(RangeMap { entries: iter::once((b'+'..=b'\\xff', Transition { dst: [Some(0), Some(2), Some(3), Some(5)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })).collect() })), (b'\\x90', CurryInput::Scrutinize(RangeMap { entries: vec![(b'\\x16'..=b'\\x9f', Transition { dst: [Some(2), Some(3)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } }), (b'\\xa8'..=b'\\xd6', Transition { dst: core::iter::once(Some(5)).collect(), act: Action::Pop, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })].into_iter().collect() })), (b'\\x95', CurryInput::Wildcard(Transition { dst: [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), (b'\\x9c', CurryInput::Scrutinize(RangeMap { entries: vec![(b'\\x00'..=b'x', Transition { dst: core::iter::once(Some(2)).collect(), act: Action::Push(b'\\r'), update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } }), (b'}'..=b'\\xba', Transition { dst: [Some(0), Some(2), Some(3), Some(4), Some(5)].collect(), act: Action::Pop, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } }), (b'\\xdc'..=b'\\xff', Transition { dst: [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5)].collect(), act: Action::Pop, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })].into_iter().collect() })), (b'\\xa8', CurryInput::Wildcard(Transition { dst: [Some(0), Some(1), Some(3), Some(4)].collect(), act: Action::Pop, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), (b'\\xac', CurryInput::Wildcard(Transition { dst: [Some(0), Some(4)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), (b'\\xbc', CurryInput::Wildcard(Transition { dst: [Some(0), Some(1), Some(2), Some(5)].collect(), act: Action::Push(b'b'), update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), (b'\\xdf', CurryInput::Wildcard(Transition { dst: [Some(0), Some(3)].collect(), act: Action::Push(b'\\xdf'), update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), (b'\\xe1', CurryInput::Wildcard(Transition { dst: [Some(0), Some(1), Some(2), Some(3), Some(4)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } }))].into_iter().collect() }, non_accepting: [\"\".to_owned(), \"\\u{1}\\u{aabd1}8/\\u{80}>\\u{12}r\\u{4}\\u{90}/\".to_owned(), \"\\u{1d}!\\u{1c})/\\u{1574e}\\u{81}\\t\\u{fffb}|\\u{94}\\u{9e}7M\\u{9d}\".to_owned(), \".\\u{1d173}X+5\\u{202e}\\u{12}\".to_owned(), \"9(\\t\".to_owned(), \"9\\u{a2}[\\u{e05})+_X\\u{8d3a}\\\\\\u{92}\\u{89}!\".to_owned(), \"mf5\\u{8f9e}\".to_owned(), \"\\u{aa}\\u{af59}RY\\u{1c}<\\u{fffb}n\\u{a6dde}\\r)\\u{2fd1}\\u{f};\\u{6a5}\".to_owned(), \"\\u{206b}\\u{82}\\u{2e92}5\\u{203a}[r @+)\".to_owned()].collect(), tags: [\"_q\\u{fff7}\\u{9c}\\u{b}\\u{aa85}\\u{7250}\\u{a7db}7U\\u{94}<[\".to_owned(), \"\\u{90}\\u{d744f}\".to_owned(), \"\\u{ac}\\u{a7}Ha\\u{2046}=\\u{10ffff}\\u{fffe}\\u{6dd}-{\\u{b}/\\u{86}2\".to_owned(), \"\\u{fff9}\\u{2061}\\u{3000}\\u{fffe}\\u{6da}-]\\u{a4}\\u{2057}\\u{95}\".to_owned(), \"\\u{59b38}\\u{98}%~8r\\u{b}\\u{3ee6}\\u{fffb}\\u{ca0b1}\\u{434b}\\u{e63f}\".to_owned()].collect() }, State { transitions: State { wildcard: Some(CurryInput::Wildcard(Transition { dst: [Some(0), Some(1), Some(2), Some(3), Some(4)].collect(), act: Action::Pop, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), map_none: None, map_some: vec![(b'V', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xd3', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() }))].into_iter().collect() }, non_accepting: [\"\\u{b}\\u{b328}\\u{5cc0}\\u{a4}\\u{82}4,*1\".to_owned(), \" 5\\u{4}\\u{ab}5_:\\u{aba81}\".to_owned(), \"M\\u{b49f}\\tF}G_\\u{1d}O2t?\\u{206b}\".to_owned(), \"\\\\\\u{ce5f}6\\u{2017}]\\u{32fb0}\\u{9d61}Z}6\\u{1b}\".to_owned(), \"h#\\u{7b176}\\u{2cff}\\u{48a6}\\u{604}\\u{a42f}%\".to_owned(), \"\\u{86}\\u{4064a}2S1\\u{d77c}\\u{3aea7}\".to_owned(), \"\\u{90}@e{`\\u{8e}\\u{7}=\\u{205c}*\\u{1b}\\'xUi\".to_owned(), \"\\u{ab}>\\u{8c};\\u{2037}\\u{a2}\\u{41d83}\\u{8407}\\u{9e}\\u{1f}+\\'\\\"a\\u{4bae}\".to_owned(), \"\\u{6dcc}2\\u{4}\\u{90}\\u{97}\\u{bcab}\\u{603}\\u{a9}d(\\u{4}`\".to_owned(), \"\\u{7867c}<\\u{950be}\".to_owned()].collect(), tags: [\" q\\u{19}\\u{35828}\\u{96}\\u{2065}{\\\"\\u{8}\\u{13}|\\u{9a}M\".to_owned(), \"|\\u{a1}\\'G\\u{203e}\\u{c9d}\\u{10c1c}7)\\u{2007}\".to_owned()].collect() }, State { transitions: State { wildcard: Some(CurryInput::Wildcard(Transition { dst: [Some(0), Some(1), Some(2), Some(3), Some(4), Some(5)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), map_none: Some(CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), map_some: vec![(b'\\x00', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x10', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x16', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'6', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'K', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b']', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'l', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'n', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x7f', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x87', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x94', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x9c', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xfd', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() }))].into_iter().collect() }, non_accepting: [\"\\u{10}\\u{4da1}\\'\\u{a9}\\u{5}\\u{2021}\\u{81}\\u{15}\\u{8a}.y\\u{201d}?\\u{577ca}J\".to_owned(), \"\\u{15}\\t\\u{2065}\\u{604}\\u{fa45}\".to_owned(), \"\\u{1e}\\u{2e08}\".to_owned(), \"%\\u{600}Pj\\u{bc66}B7\\u{600}\\u{203e}\".to_owned(), \"1<\\u{19c07}\\u{a4}\\u{7f17}\\u{2000}>\".to_owned(), \"?\\u{85}\\u{6b9a4}=~iw|\\u{aa}r{\\\\\\u{0}\".to_owned(), \"?\\u{d432}\\u{fc57}\\u{41578}3\\u{1d}?s\\u{b}\".to_owned(), \"E\\u{1c}\\'z\".to_owned(), \"[\".to_owned(), \"~\\u{3}L\".to_owned(), \"\\u{80}\\u{fffa}43+\\u{e8d2d}\\u{3550f}?\\u{9003}9T\\u{fffe}\\u{ac}\\u{af}\".to_owned(), \"\\u{4211}\\u{94}\".to_owned(), \"\\u{49ac}@O\\u{a2}xa\\u{ad}3\\u{2067}\\u{fff5})<\\u{2059}L\".to_owned()].collect(), tags: [\"\\u{1d}\\u{3577}+D\\u{c}\\u{98};-tS9^\".to_owned(), \"8$\\u{ab}\\u{95}\\u{ab}3r\\u{8d38}\\u{7c74}\\u{12}\".to_owned(), \"C\\n\".to_owned(), \"Q\\u{9c}+-\\u{19}\\u{1f}\\u{c0a4}\\u{fffd}\\u{9c}\".to_owned(), \"^\\u{8}t-\\u{a0}\\u{12}\\u{4cf2}\\u{111f}%\\u{b}o!\".to_owned(), \"\\u{86}\".to_owned(), \"\\u{200c}\\u{92}@_\\u{2033}H3\\u{353}\\u{a8}\".to_owned(), \"\\u{8f5b}Y+\\u{5}\\u{f26}p\\u{b}y$4\\u{8d}\".to_owned(), \"\\u{fffc}\\u{8c21}\\u{c410}2%#\\u{206d};\\u{76ea4}\".to_owned(), \"\\u{53a33}^\\u{5380}\\r@}\\u{fff4}i9&\\u{76c9}=\\u{a8ca}\".to_owned()].collect() }, State { transitions: State { wildcard: Some(CurryInput::Wildcard(Transition { dst: [Some(0), Some(1), Some(3)].collect(), act: Action::Local, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })), map_none: Some(CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), map_some: vec![(b't', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xb1', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() }))].into_iter().collect() }, non_accepting: std::collections::BTreeSet::<usize>::new(), tags: [\"\\u{12}|z\\u{8}L6:\\u{9f}\\u{4e77}\\u{cb1a}\\u{2aa}\\u{7}\\u{201c}]\\u{a3}\".to_owned(), \"\\u{1b}}M`\\u{9d}\\u{af}]#\\u{603}A!\".to_owned(), \" 1\\']~)4.\\u{a4}\".to_owned(), \"\\'C\".to_owned(), \"05\\u{6d0b}\\u{8b}\\u{ef8ff}(\\u{bb6a}\\n\\u{15}\\u{fff0}7\\u{17}t\".to_owned(), \"4;*=|\\u{fa920}`<\\n)1\\u{5d82}+\\t\\u{6273}\".to_owned(), \"7T&\\u{82}\\\\\\u{9d} 0\\u{4a595}\\u{a5}\".to_owned(), \"<-k\\u{10ffff}0K{,\".to_owned(), \"= !E4\\u{7da7}\\u{1b}(\\u{19fc}\\u{9d}z\".to_owned(), \">=~\".to_owned(), \"[(4\\u{61c}\\u{82}\\u{3069}\".to_owned(), \"u3`[\\u{2055}\\u{94}:\\u{b6b1}\\u{98}\\u{a3}\\u{aa5b7}\".to_owned(), \"\\u{a0}\\u{2c116}T%c\\u{f}\\u{1}\\u{10fffd}\".to_owned(), \"\\u{80a3}~\\u{1c}\".to_owned(), \"\\u{bafc}\\u{730a} Y \\u{4384}\\u{e354}2\\u{205f}\\u{3a86}$~\\u{19}\".to_owned()].collect() }, State { transitions: State { wildcard: Some(CurryInput::Scrutinize(RangeMap { entries: iter::once((b'\\x01'..=b'\\xd5', Transition { dst: [Some(1), Some(3), Some(4)].collect(), act: Action::Pop, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })).collect() })), map_none: None, map_some: vec![(b'\\x0c', CurryInput::Scrutinize(RangeMap { entries: iter::once((b'\\xf2'..=b'\\xfa', Transition { dst: [Some(0), Some(1), Some(2), Some(4), Some(5)].collect(), act: Action::Pop, update: Input { input_t: \"()\".to_owned(), output_t: \"()\".to_owned(), ghost: PhantomData, src: \"|(), _| {}\" } })).collect() })), (b'>', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'G', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'Q', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'a', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'u', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x80', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x86', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\x8e', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xa7', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xad', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xb0', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xc3', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xc7', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() })), (b'\\xfe', CurryInput::Scrutinize(RangeMap { entries: BTreeMap::new() }))].into_iter().collect() }, non_accepting: [\"*\\u{80}\\u{2049}.\\u{2058}\\u{c}\".to_owned(), \"-7V\\u{99}\\u{c}\\u{8b55}\\u{ada2}\\u{a77a9}?\\u{2}1\".to_owned(), \"73\\u{90}!\\u{2038}^O%\\u{a6}3T4}\".to_owned(), \"Wa|K/\\u{aa}<C\\u{98}\".to_owned(), \"\\u{84}\\u{5fc5}\".to_owned(), \"\\u{600}:\\u{84}^\\u{18}\\u{91}$\\u{87})\\u{4e31}Y)\".to_owned(), \"\\u{9d35}[q\\u{5e9a}<d\\u{2057}6\\u{ab4a}\\u{84}\".to_owned()].collect(), tags: [\"\\u{e}\\u{c4}g\\u{f27c}|.R\\u{11}\".to_owned(), \"$\\u{af}113\\u{88}\\u{7cc29}}\\u{601}\\u{25f01}\\u{a0}\".to_owned(), \"(\\u{10ffff}\\\\\\u{8d}V\".to_owned(), \"+\\u{fffff}:\\u{960b}{\\u{1b}\\u{201c}\\u{22fd}H\\u{1b}\\u{70f}\".to_owned(), \"\\u{88}\\u{95}\".to_owned(), \"\\u{9e}\\u{2ac3}&\\u{d5a9}\\u{0}\\u{df05b}l,B\\u{89}!\".to_owned(), \"\\u{9f}\\u{1d}#\\u{ad})\\u{e0001}\".to_owned(), \"\\u{2006}\\u{18}\\u{e269}\\u{b}5\\u{2061}\".to_owned(), \"\\u{fff9}\".to_owned()].collect() }], initial: [Some(0), Some(2)].collect() }
}
